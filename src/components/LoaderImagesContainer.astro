---
const imageSize: number = 500;
---

<div class="w-full flex items-center justify-center opacity-0 scale-90 relative" id="images-container">
  <img
    id="image-1"
    src="img/loader/img-01.jpg"
    alt="imagen de programación"
    width={imageSize}
    class="lg:w-56 lg:h-100 w-40 h-60 object-cover scale-70 absolute z-10 rounded"
  />
  <img
    id="image-2"
    src="img/loader/img-02.jpg"
    alt="imagen de programación"
    width={imageSize}
    class="lg:w-56 lg:h-100 w-40 h-60 object-cover scale-80 absolute z-20 rounded"
  />
  <img
    id="image-3"
    src="img/loader/img-03.jpg"
    alt="imagen de programación"
    width={imageSize}
    class="lg:w-56 lg:h-100 w-40 h-60 object-cover scale-90 absolute z-30 rounded"
  />
  <img
    id="image-4"
    src="img/loader/img-04.jpg"
    alt="imagen de programación"
    width={imageSize}
    class="lg:w-56 lg:h-100 w-40 h-60 object-cover absolute z-40 rounded"
  />
  <img
    id="image-5"
    src="img/loader/img-05.jpg"
    alt="imagen de programación"
    width={imageSize}
    class="lg:w-56 lg:h-100 w-40 h-60 object-cover scale-90 z-30 rounded"
  />
  <img
    id="image-6"
    src="img/loader/img-06.jpg"
    alt="imagen de programación"
    width={imageSize}
    class="lg:w-56 lg:h-100 w-40 h-60 object-cover scale-80 absolute z-20 rounded"
  />
  <img
    id="image-7"
    src="img/loader/img-07.jpg"
    alt="imagen de programación"
    width={imageSize}
    class="lg:w-56 lg:h-100 w-40 h-60 object-cover scale-70 absolute z-10 rounded"
  />
</div>

<script>
  import gsap from "gsap";

  interface ReturnAnimation {
    name: string;
    position: string | number;
  }

  const returnAnimation: ReturnAnimation = {
    name: 'return',
    position: '+=1.4',
  }

  const animImageDuration: number = 1.2;
  const animStartDelay: number = 1;

  const mm = gsap.matchMedia();
  // ? Contenedor de imagenes
  const tl = gsap.timeline();

  tl.to("#images-container", {
    opacity: 1,
    scale: 1,
    duration: 1.2,
    delay: 0.5,
    ease: "power2.out",
  }).to("#images-container", {
    opacity: 0,
    scale: 0.9,
    duration: 1.2,
    delay: 2.5,
    ease: "power2.out",
  });

  // * Primeros elementos
  const firstElements = gsap.timeline();

  mm.add("(min-width: 1024px)", () => {
    firstElements.to("#image-3", {
      x: -160,
      duration: animImageDuration,
      delay: animStartDelay,
      ease: "power2.out",
    }).to("#image-5", {
      x: 160,
      duration: animImageDuration,
      delay: animStartDelay,
      ease: "power2.out",
    }, 0).add(returnAnimation.name, returnAnimation.position)
    .to("#image-3", {
      x: 0,
      duration: animImageDuration,
      ease: "power2.inOut",
    }, 'return').to("#image-5", {
      x: 0,
      duration: animImageDuration,
      ease: "power2.inOut",
    }, 'return')
  });

  mm.add("(max-width: 1023px)", () => {
    firstElements.to("#image-3", {
      x: -40,
      duration: animImageDuration,
      delay: animStartDelay,
      ease: "power2.out",
    }).to("#image-5", {
      x: 40,
      duration: animImageDuration,
      delay: animStartDelay,
      ease: "power2.out",
    }, 0).add(returnAnimation.name, returnAnimation.position)
    .to("#image-3", {
      x: 0,
      duration: animImageDuration,
      ease: "power2.inOut",
    }, 'return').to("#image-5", {
      x: 0,
      duration: animImageDuration,
      ease: "power2.inOut",
    }, 'return')
  });
  

  // ? Ultimos elementos
  const secondElements = gsap.timeline();

  mm.add("(min-width: 1024px)", () => {
    secondElements.to("#image-6", {
    x: -250,
    duration: animImageDuration,
    delay: animStartDelay,
    ease: "power2.out",
  }).to("#image-2", {
    x: 250,
    duration: animImageDuration,
    delay: animStartDelay,
    ease: "power2.out",
  }, 0)
  .add(returnAnimation.name, returnAnimation.position)
  .to("#image-6", {
    x: 0,
    duration: animImageDuration,
    ease: "power2.inOut",
  }, 'return')
  .to("#image-2", {
    x: 0,
    duration: animImageDuration,
      ease: "power2.inOut",
    }, 'return');
  });

  mm.add("(max-width: 1023px)", () => {
    secondElements.to("#image-6", {
      x: -80,
      duration: animImageDuration,
      delay: animStartDelay,
      ease: "power2.out",
    }).to("#image-2", {
      x: 80,
      duration: animImageDuration,
      delay: animStartDelay,
      ease: "power2.out",
    }, 0)
    .add(returnAnimation.name, returnAnimation.position)
    .to("#image-6", {
      x: 0,
      duration: animImageDuration,
      ease: "power2.inOut",
    }, 'return')
    .to("#image-2", {
      x: 0,
      duration: animImageDuration,
      ease: "power2.inOut",
    }, 'return');
  });

  const thirdElements = gsap.timeline();

  mm.add("(min-width: 1024px)", () => {
    thirdElements.to("#image-7", {
      x: -320,
      duration: animImageDuration,
      delay: animStartDelay,
      ease: "power2.out",
    }).to("#image-1", {
      x: 320,
      duration: animImageDuration,
      delay: animStartDelay,
      ease: "power2.out",
    }, 0)
    .add(returnAnimation.name, returnAnimation.position)
    .to("#image-7", {
      x: 0,
      duration: animImageDuration,
      ease: "power2.inOut",
    }, 'return')
    .to("#image-1", {
      x: 0,
      duration: animImageDuration,
      ease: "power2.inOut",
    }, 'return');
  });

  mm.add("(max-width: 1023px)", () => {
    thirdElements.to("#image-7", {
      x: -120,
      duration: animImageDuration,
      delay: animStartDelay,
      ease: "power2.out",
    }).to("#image-1", {
      x: 120,
      duration: animImageDuration,
      delay: animStartDelay,
      ease: "power2.out",
    }, 0)
    .add(returnAnimation.name, returnAnimation.position)
    .to("#image-7", {
      x: 0,
      duration: animImageDuration,
      ease: "power2.inOut",
    }, 'return')
    .to("#image-1", {
      x: 0,
      duration: animImageDuration,
      ease: "power2.inOut",
    }, 'return');
  });
</script>
