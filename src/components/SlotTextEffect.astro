---
// SlotMachine.astro
interface Props {
  phrase: string;
  iconsUrl: string[];
  iterationsCount?: number;
  className?: string;
  iconsSize?: string;
}

const { phrase, iconsUrl, iterationsCount = 6, className, iconsSize } = Astro.props;

const phraseSplitted = phrase.split("");

// 1. Constantes
const letters = phraseSplitted;
const svgIcons = iconsUrl;
const ITERATIONS_COUNT = iterationsCount;

type Item = { type: "text" | "svg"; content: string };

/**
 * Genera el arreglo de elementos para una columna:
 * - Comienza con la letra `startLetter`
 * - Alterna aleatoriamente imagen y letra, ITERATIONS_COUNT veces
 * - Termina forzando la misma letra `startLetter`
 */

//  ? Esto retorna n letras + n imágenes + 1 elemento final
function generateColumnItems(startLetter: string): Item[] {
  const items: Item[] = [];

  // 1️⃣ Agregar la letra inicial
  items.push({ type: "text", content: startLetter });

  // 2️⃣ Alternar ITERATIONS_COUNT veces
  for (let i = 0; i < ITERATIONS_COUNT; i++) {
    // 2.1️⃣ Seleccionar imagen aleatoria
    const imgRandom = svgIcons[Math.floor(Math.random() * svgIcons.length)];
    items.push({ type: "svg", content: imgRandom });

    // 2.2️⃣ Seleccionar letra aleatoria
    const letterRandom = letters[Math.floor(Math.random() * letters.length)];
    items.push({ type: "text", content: letterRandom });
  }

  // 3️⃣ Forzar que el último elemento sea startLetter
  items[items.length - 1] = { type: "text", content: startLetter };

  return items;
}
---

<span
  aria-label={ phrase }
  class:list={className ? `flex overflow-hidden ${className}` : "text-8xl font-bold text-black flex overflow-hidden"}
>
  {
    letters.map((letter) => (
      <div
        class="flex flex-col slot-column"
        data-letter={letter}
        aria-label={`Columna animada iniciando con ${letter}`}
        style="height: 6rem;"
      >
        {generateColumnItems(letter).map((item) =>
          item.type === "text" ? (
            <span class="flex-shrink-0">{item.content}</span>
          ) : (
            <span class="flex-shrink-0">
              <img
                src={item.content}
                alt={`Icono: ${item.content}`}
                class:list={iconsSize ? `size-${iconsSize} object-contain` : "size-14 object-contain"}
              />
            </span>
          )
        )}
      </div>
    ))
  }
</span>

<style>
  .slot-column span {
    height: 6rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .slot-column span img {
    transform: scale(0.8);
    transition: transform 0.3s ease;
  }

  .slot-column span img:hover {
    transform: scale(1);
  }
</style>

<script>
  import { gsap } from "gsap";

  const columns = document.querySelectorAll(".slot-column");
  const slotAnimation = gsap.timeline({
    defaults: { duration: 2.4, ease: "power4.inOut" },
  });

  slotAnimation.to(columns, {
    y: `-1200%`,
    stagger: 0.1,
  });

  document.addEventListener("visibilitychange", () => {
    slotAnimation[document.hidden ? "pause" : "resume"]();
  });
</script>